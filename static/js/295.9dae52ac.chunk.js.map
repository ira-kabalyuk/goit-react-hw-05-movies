{"version":3,"file":"static/js/295.9dae52ac.chunk.js","mappings":"iLACA,EAA0B,yB,SCEpBA,EAAU,SAAHC,GAAoB,IAAfC,EAAQD,EAARC,SAChB,OACEC,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAeH,SAAEA,GAEnC,C,0KCNA,GAAgB,KAAO,mBAAmB,KAAO,oB,SCmEjD,EArDa,WACX,IACMI,GADQC,EAAAA,EAAAA,MACWC,GACzBC,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAASM,EAAAA,EAAAA,MAAcC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA5CG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA0BV,EAAAA,EAAAA,UAAS,MAAKW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,EAAWN,IAAWF,EAAAA,EAAAA,QACtBS,EAAYP,IAAWF,EAAAA,EAAAA,MACvBU,EAAaR,IAAWF,EAAAA,EAAAA,QAEtBW,EAAiB,eAAA1B,GAAA2B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAOxB,GAAU,IAAAyB,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEd,OAFcF,EAAAC,KAAA,EAEzCd,EAAUH,EAAAA,EAAAA,SAAiBgB,EAAAE,KAAA,GACLC,EAAAA,EAAAA,IAAa7B,GAAY,KAAD,EAAxCyB,EAAOC,EAAAI,KACbtB,EAAQiB,GACRZ,EAAUH,EAAAA,EAAAA,SAAkBgB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAE5BT,EAASS,EAAAK,GAAMC,SACfnB,EAAUH,EAAAA,EAAAA,OAAgB,yBAAAgB,EAAAO,OAAA,GAAAT,EAAA,kBAE7B,gBAVwBU,GAAA,OAAAvC,EAAAwC,MAAA,KAAAC,UAAA,MAYxBC,EAAAA,EAAAA,YAAU,WACThB,EAAkBrB,EACnB,GAAG,CAACA,IAIL,OACEsC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3C,SAAA,GACKW,GAAQa,KAAevB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,IAChCtB,GAAYX,IACXA,EAAKA,MAAQA,EAAKA,KAAKkC,OAAS,GAC9B5C,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,KAAYH,SACxBW,EAAKA,KAAKmC,KAAI,SAACC,EAAMC,GAAK,OACzBN,EAAAA,EAAAA,MAAA,MAAgBxC,UAAWC,EAAAA,KAAYH,SAAA,EACrCC,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,KAAYH,SAAE+C,EAAKE,QACjChD,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,MAAaH,UAC3BC,EAAAA,EAAAA,KAAA,OAAKiD,IAAKH,EAAKI,aAAY,GAAAC,OAZxB,oCAYwCA,OAAGL,EAAKI,cAAiBE,EAAAA,EAAAA,WAAsBC,IAAK3C,EAAKA,KAAK4C,YAHpGP,EAKJ,OAIP/C,EAAAA,EAAAA,KAACH,EAAAA,EAAO,CAAAE,SAAC,qEAGZuB,IAAamB,EAAAA,EAAAA,MAACc,EAAAA,EAAK,CAAAxD,SAAA,CAAC,gCAA8BoB,OAG3D,C","sources":["webpack://react-homework-template/./src/components/Message/Message.module.scss?ab33","components/Message/Message.jsx","webpack://react-homework-template/./src/pages/Cast/Cast.module.scss?a69e","pages/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__UdveK\"};","import React from 'react';\nimport styles from './Message.module.scss';\n\nconst Message = ({children}) => {\n  return (\n    <p className={styles.message}>{children}</p>\n  );\n};\n\nexport { Message };","// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__pHnmh\",\"name\":\"Cast_name__SRTUV\"};","import React, {useState, useEffect} from \"react\";\nimport { useParams } from 'react-router-dom';\n\nimport { requestCasts } from 'services/api';\n\nimport { STATUSES } from 'utils/constants';\nimport {CONSTANTS} from 'utils/constants';\n\nimport { Error } from 'components/Error';\nimport { Loader } from 'components/Loader';\nimport { Message } from 'components/Message';\n\nimport styles from './Cast.module.scss';\n\n\nconst Cast = () => {\n  const param = useParams();\n  const paramValue = param.id;\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(STATUSES.idle);\n  const [error, setError] = useState(null);\n\n  const showCast = status === STATUSES.success;\n  const showError = status === STATUSES.error;\n  const showLoader = status === STATUSES.pending;\n\n    const fetchCastsByQuery = async (paramValue) => {\n    try {\n      setStatus(STATUSES.pending)\n      const newCast = await requestCasts(paramValue);      \n      setCast(newCast)\n      setStatus(STATUSES.success); \n    } catch (error) {\n      setError(error.message);\n      setStatus(STATUSES.error);\n    }\n  }\n\n   useEffect(() => {\n    fetchCastsByQuery(paramValue);\n   }, [paramValue]);\n\n  const staticPart = \"https://image.tmdb.org/t/p/w500/\";\n\n  return (\n    <>\n      {(!cast || showLoader) && <Loader />}\n      {showCast && cast && (\n        cast.cast && cast.cast.length > 0 ? (\n          <ul className={styles.cast}>\n            {cast.cast.map((item, index) => (\n              <li key={index} className={styles.item}>\n                <p className={styles.name}>{item.name}</p>\n                <div className={styles.image}>\n                  <img src={item.profile_path ? `${staticPart}${item.profile_path}` : CONSTANTS.defaultImg} alt={cast.cast.title} />\n                </div>\n              </li>\n            ))}\n          </ul>\n          ) : (\n            <Message>There is no information here yet ü§∑‚Äç‚ôÄÔ∏è</Message>\n          )\n        )}\n        {showError && <Error>Oops, some error occurred... {error}</Error>}\n    </>\n  );\n};\n\nexport default Cast;"],"names":["Message","_ref","children","_jsx","className","styles","paramValue","useParams","id","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","STATUSES","_useState4","status","setStatus","_useState5","_useState6","error","setError","showCast","showError","showLoader","fetchCastsByQuery","_asyncToGenerator","_regeneratorRuntime","_callee","newCast","_context","prev","next","requestCasts","sent","t0","message","stop","_x","apply","arguments","useEffect","_jsxs","_Fragment","Loader","length","map","item","index","name","src","profile_path","concat","CONSTANTS","alt","title","Error"],"sourceRoot":""}